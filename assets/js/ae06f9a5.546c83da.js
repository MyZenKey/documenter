"use strict";(self.webpackChunkdevpub=self.webpackChunkdevpub||[]).push([[5565],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=u(t),f=o,m=l["".concat(c,".").concat(f)]||l[f]||p[f]||i;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=l;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},6169:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return l}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],d={sidebar_position:23},c="Decoding the ID Token",u={unversionedId:"android/integration-guide/android-decoding-the-id-token",id:"android/integration-guide/android-decoding-the-id-token",isDocsHomePage:!1,title:"Decoding the ID Token",description:"The ID token needs decoding. After decoding the JWT payload, it displays claims for the authentication of your end-user. Always validate the ID Token after decoding it. Specifically, verify the signature and claims contained within the ID Token. For more information about each parameter, refer to integration options on the web.",source:"@site/docs/android/integration-guide/android-decoding-the-id-token.md",sourceDirName:"android/integration-guide",slug:"/android/integration-guide/android-decoding-the-id-token",permalink:"/documenter/docs/android/integration-guide/android-decoding-the-id-token",editUrl:"https://github.com/MyZenKey/documenter/edit/main/docs/android/integration-guide/android-decoding-the-id-token.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"Access Token Response",permalink:"/documenter/docs/android/integration-guide/android-access-token-response"},next:{title:"Requesting User Information",permalink:"/documenter/docs/android/integration-guide/android-requesting-user-information"}},s=[],p={toc:s};function l(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"decoding-the-id-token"},"Decoding the ID Token"),(0,i.kt)("p",null,"The ID token needs decoding. After decoding the JWT payload, it displays claims for the authentication of your end-user. Always validate the ID Token after decoding it. Specifically, verify the signature and claims contained within the ID Token. For more information about each parameter, refer to ",(0,i.kt)("a",{parentName:"p",href:"doc:web-integration-options"},"integration options on the web"),". "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Sample Decoded ID Token:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{   \n    "type"="at+jwt",  \n    "kid":"xxx"\n}\n\n{\n    "iss": https://mno.com,\n    "sub": "mccmnc-client0001",   \n    "aud": "ccid-sp00001",\n    "nonce": "n-0S6_WzA2Mj",\n    "exp": 1311281970,\n    "iat": 1311280970,\n    "auth_time": 1311280969,\n    "acr": "a3",\n    ...\n}\n')))}l.isMDXComponent=!0}}]);