"use strict";(self.webpackChunkdevpub=self.webpackChunkdevpub||[]).push([[9626],{3905:function(e,r,n){n.d(r,{Zo:function(){return u},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),p=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},u=function(e){var r=p(e.components);return t.createElement(c.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},s=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),s=p(n),f=o,m=s["".concat(c,".").concat(f)]||s[f]||l[f]||i;return n?t.createElement(m,a(a({ref:r},u),{},{components:n})):t.createElement(m,a({ref:r},u))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=s;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d.mdxType="string"==typeof e?e:o,a[1]=d;for(var p=2;p<i;p++)a[p]=n[p];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5367:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return s}});var t=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],d={},c="PKCE errors on Android",p={unversionedId:"android/integration-guide/android-pkce-errors",id:"android/integration-guide/android-pkce-errors",isDocsHomePage:!1,title:"PKCE errors on Android",description:"1. No Code Verifier. If the server requires PKCE, but the client does not send a codeVerifier, the authorization endpoint will send an error set to invalidrequest. The errordescription or response of error_uri will likely explain the error (e.g.codeVerifier required).",source:"@site/docs/android/integration-guide/android-pkce-errors.md",sourceDirName:"android/integration-guide",slug:"/android/integration-guide/android-pkce-errors",permalink:"/documenter/docs/android/integration-guide/android-pkce-errors",editUrl:"https://github.com/MyZenKey/documenter/edit/main/docs/android/integration-guide/android-pkce-errors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Integrating proof key for code exchange on Android",permalink:"/documenter/docs/android/integration-guide/android-integrating-proof-key-for-code-exchange"},next:{title:"Integration Options on the Web",permalink:"/documenter/docs/web/web-integration-options"}},u=[],l={toc:u};function s(e){var r=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pkce-errors-on-android"},"PKCE errors on Android"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"No Code Verifier"),". If the server requires PKCE, but the client does not send a ",(0,i.kt)("inlineCode",{parentName:"p"},"codeVerifier"),", the authorization endpoint will send an error set to ",(0,i.kt)("inlineCode",{parentName:"p"},"invalid_request"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"error_description")," or response of ",(0,i.kt)("inlineCode",{parentName:"p"},"error_uri")," will likely explain the error (e.g.",(0,i.kt)("inlineCode",{parentName:"p"},"codeVerifier required"),").")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Incorrect Code Verifier"),". Since ZenKey sends a hashed version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"codeVerifier")," in the authorization request, when the carrier receives this ",(0,i.kt)("inlineCode",{parentName:"p"},"codeVerifier")," in the token request they can re-hash it and validate whether the two values match. If not, you will receive a ",(0,i.kt)("inlineCode",{parentName:"p"},"request_denied")," error."))))}s.isMDXComponent=!0}}]);