"use strict";(self.webpackChunkdevpub=self.webpackChunkdevpub||[]).push([[1900],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return y}});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=o.createContext({}),l=function(t){var e=o.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=l(t.components);return o.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},p=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,u=t.parentName,s=d(t,["components","mdxType","originalType","parentName"]),p=l(n),y=r,m=p["".concat(u,".").concat(y)]||p[y]||c[y]||i;return n?o.createElement(m,a(a({ref:e},s),{},{components:n})):o.createElement(m,a({ref:e},s))}));function y(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,a=new Array(i);a[0]=p;var d={};for(var u in e)hasOwnProperty.call(e,u)&&(d[u]=e[u]);d.originalType=t,d.mdxType="string"==typeof t?t:r,a[1]=d;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},570:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],d={sidebar_position:4},u="Adding ZenKey Button on Android",l={unversionedId:"android/quickstart/android-add-the-zenkey-button",id:"android/quickstart/android-add-the-zenkey-button",isDocsHomePage:!1,title:"Adding ZenKey Button on Android",description:"The ZenKey SDK provides a default button to interact with the identityProvider and start the authorization intent. To use the ZenKey button, add the following to your XML layout.",source:"@site/docs/android/quickstart/android-add-the-zenkey-button.md",sourceDirName:"android/quickstart",slug:"/android/quickstart/android-add-the-zenkey-button",permalink:"/documenter/docs/android/quickstart/android-add-the-zenkey-button",editUrl:"https://github.com/MyZenKey/documenter/edit/main/docs/android/quickstart/android-add-the-zenkey-button.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Configuring Client ID on Android",permalink:"/documenter/docs/android/quickstart/android-configure-your-client-id"},next:{title:"Receiving Authorization Request Response on Android",permalink:"/documenter/docs/android/quickstart/android-receive-an-authorization-request-response"}},s=[{value:"Add a dark color button",id:"add-a-dark-color-button",children:[]},{value:"Add a light color button",id:"add-a-light-color-button",children:[]},{value:"Add button text",id:"add-button-text",children:[]},{value:"Add a fragment button",id:"add-a-fragment-button",children:[]},{value:"Create a custom button",id:"create-a-custom-button",children:[]}],c={toc:s};function p(t){var e=t.components,d=(0,r.Z)(t,a);return(0,i.kt)("wrapper",(0,o.Z)({},c,d,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-zenkey-button-on-android"},"Adding ZenKey Button on Android"),(0,i.kt)("p",null,"The ZenKey SDK provides a default button to interact with the ",(0,i.kt)("inlineCode",{parentName:"p"},"identityProvider")," and start the authorization intent. To use the ZenKey button, add the following to your XML layout."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'         <com.xci.zenkey.sdk.widget.ZenKeyButton\n             android:id="@+id/zenKeyButton"\n             android:layout_width="match_parent"\n             android:layout_height="wrap_content"/>\n')),(0,i.kt)("h2",{id:"add-a-dark-color-button"},"Add a dark color button"),(0,i.kt)("p",null,"The button's appearance is customizable. A dark button style is the default style and looks like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ZenKey dark button",src:n(6918).Z})),(0,i.kt)("h2",{id:"add-a-light-color-button"},"Add a light color button"),(0,i.kt)("p",null,"To use the light button style, add the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},'app:ZenKeyButtonMode="LIGHT"')," as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'        <com.xci.zenkey.sdk.widget.ZenKeyButton\n              android:id="@+id/zenKeyButton"\n              android:layout_width="match_parent"\n              android:layout_height="wrap_content"\n              app:ZenKeyButtonMode="LIGHT"/>\n')),(0,i.kt)("p",null,"The light button style looks like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"ZenKey light button",src:n(3302).Z})),(0,i.kt)("h2",{id:"add-button-text"},"Add button text"),(0,i.kt)("p",null,"Set the text of your button using the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"app:ZenKeyButtonText"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'       <com.xci.zenkey.sdk.widget.ZenKeyButton\n            android:id="@+id/zenkeyButton"\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:layout_gravity="center"\n            app:ZenKeyButtonMode="DARK"\n            app:ZenKeyButtonText="CONTINUE"/>\n')),(0,i.kt)("h2",{id:"add-a-fragment-button"},"Add a fragment button"),(0,i.kt)("p",null,"To use the ZenKey button inside a fragment, set the fragment to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZenKeyButton")," to receive results inside the fragment ",(0,i.kt)("inlineCode",{parentName:"p"},"onActivityResult()")," method. Otherwise, receive results in the ",(0,i.kt)("inlineCode",{parentName:"p"},"onActivityResult()")," method of the host activity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class MyFragment extends Fragment {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.my_layout);\n        findViewById(R.id.myZenKeyButton).setFragment(this);\n    }\n}\n")),(0,i.kt)("h2",{id:"create-a-custom-button"},"Create a custom button"),(0,i.kt)("p",null,"Custom buttons must meet the ZenKey brand integration guidelines for approval. Read more about button requirements in the ",(0,i.kt)("a",{parentName:"p",href:"/documenter/docs/best-practices/best-practices-identity-service-brand-integration-guidelines/brand-guidelines-zenkey-buttons"},"identity service brand integration guidelines")),(0,i.kt)("p",null,"Instead of the default ",(0,i.kt)("inlineCode",{parentName:"p"},"ZenKeyButton"),", you may use your own custom button or view. This option is useful if your login UX is presented in a WebView see ",(0,i.kt)("a",{parentName:"p",href:"/documenter/docs/android/integration-guide/android-display-a-webview-for-user-login"},"display a webview for user login on Android"),"."),(0,i.kt)("p",null,"To make authorization requests, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"identityProvider"),",  but we recommend using ",(0,i.kt)("inlineCode",{parentName:"p"},"ZenKeyButton")," (the default button interacts with the identityProvider and initiates the authorization intent). If you decide to use ",(0,i.kt)("inlineCode",{parentName:"p"},"identityProvider"),", you call ",(0,i.kt)("inlineCode",{parentName:"p"},"ZenKey.identityProvider().authorizeIntent().build()"),"."),(0,i.kt)("p",null,"The intent obtained from the ",(0,i.kt)("inlineCode",{parentName:"p"},"identityProvider")," must start by using ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent,%20int)"},"Activity.startActivityForResult(Intent, Int)"),"."),(0,i.kt)("p",null,"You can use any request code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       setContentView(R.layout.my_layout);\n       findViewById(R.id.myZenKeyButton).setOnClickListener(v -> startZenKeyAuthorization());\n    }\n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withScopes(Scopes.EMAIL, Scopes.ADDRESS)\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For more information see ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/MyZenKey/sp-sdk-android"},"GitHub sp-sdk-android"),".")))}p.isMDXComponent=!0},6918:function(t,e,n){e.Z=n.p+"assets/images/dark-f3032ee5e6aafe8fa3d2c04507911f60.png"},3302:function(t,e,n){e.Z=n.p+"assets/images/light-f596ef297d51179685f6498cf93069df.png"}}]);