"use strict";(self.webpackChunkdevpub=self.webpackChunkdevpub||[]).push([[8861],{3905:function(t,n,e){e.d(n,{Zo:function(){return p},kt:function(){return y}});var i=e(7294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function a(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?a(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,i,r=function(t,n){if(null==t)return{};var e,i,r={},a=Object.keys(t);for(i=0;i<a.length;i++)e=a[i],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(i=0;i<a.length;i++)e=a[i],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var c=i.createContext({}),d=function(t){var n=i.useContext(c),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},p=function(t){var n=d(t.components);return i.createElement(c.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return i.createElement(i.Fragment,{},n)}},l=i.forwardRef((function(t,n){var e=t.components,r=t.mdxType,a=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),l=d(e),y=r,f=l["".concat(c,".").concat(y)]||l[y]||u[y]||a;return e?i.createElement(f,o(o({ref:n},p),{},{components:e})):i.createElement(f,o({ref:n},p))}));function y(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var a=e.length,o=new Array(a);o[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,o[1]=s;for(var d=2;d<a;d++)o[d]=e[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,e)}l.displayName="MDXCreateElement"},1165:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return l}});var i=e(7462),r=e(3366),a=(e(7294),e(3905)),o=["components"],s={sidebar_position:13},c="Handling Authorization Responses on Android",d={unversionedId:"android/quickstart/android-handling-authorization-responses",id:"android/quickstart/android-handling-authorization-responses",isDocsHomePage:!1,title:"Handling Authorization Responses on Android",description:"PendingIntent is a description of an Intent and target action to perform with it. Objects returned by PendingIntent can be directed toward other applications in order to perform a specified action such as integrating the ZenKey SDK for either successful or unsuccessful authorization responses.",source:"@site/docs/android/quickstart/android-handling-authorization-responses.md",sourceDirName:"android/quickstart",slug:"/android/quickstart/android-handling-authorization-responses",permalink:"/documenter/docs/android/quickstart/android-handling-authorization-responses",editUrl:"https://github.com/MyZenKey/documenter/edit/main/docs/android/quickstart/android-handling-authorization-responses.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Receiving Authorization Request Response on Android",permalink:"/documenter/docs/android/quickstart/android-receive-an-authorization-request-response"},next:{title:"Project Setup on Android",permalink:"/documenter/docs/android/integration-guide/android-set-up-your-project"}},p=[],u={toc:p};function l(t){var n=t.components,e=(0,r.Z)(t,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"handling-authorization-responses-on-android"},"Handling Authorization Responses on Android"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PendingIntent")," is a description of an Intent and target action to perform with it. Objects returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingIntent")," can be directed toward other applications in order to perform a specified action such as integrating the ZenKey SDK for either successful or unsuccessful authorization responses."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234; \n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withSuccessIntent(PendingIntent.getActivity(this, Activity.RESULT_OK, new Intent(this, SuccessActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .withFailureIntent(PendingIntent.getActivity(this, Activity.RESULT_OK, new Intent(this, FailureActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,a.kt)("p",null,"Specifiying ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingIntent")," to start in case of completion is an alternative. This ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingIntent")," is ignored if the above ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingIntents")," are specified as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234;\n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withCompletionIntent(PendingIntent.getActivity(this, Activity.RESULT_OK, new Intent(this, CompletionActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,a.kt)("p",null,"Specifying a ",(0,a.kt)("inlineCode",{parentName:"p"},"PendingIntent")," to start for cancelled authorizations is another option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234;\n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withCancellationIntent(PendingIntent.getActivity(this, Activity.RESULT_CANCELED, new Intent(this, CancellationActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,a.kt)("p",null,"Inside the started Activity, developers obtain the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthorizationResponse")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthorizationResponse.fromIntent(intent)")," passing the intent which started the activity as a parameter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class MyResultActivity extends AppCompatActivity {\n\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n           super.onCreate(savedInstanceState);\n           AuthorizationResponse response = AuthorizationResponse.fromIntent(getIntent());\n        }\n}        \n")))}l.isMDXComponent=!0}}]);