"use strict";(self.webpackChunkdevpub=self.webpackChunkdevpub||[]).push([[1704],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return g}});var i=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,i,r=function(n,e){if(null==n)return{};var t,i,r={},o=Object.keys(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(i=0;i<o.length;i++)t=o[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=i.createContext({}),d=function(n){var e=i.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=d(n.components);return i.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},l=i.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),l=d(t),g=r,y=l["".concat(c,".").concat(g)]||l[g]||u[g]||o;return t?i.createElement(y,a(a({ref:e},p),{},{components:t})):i.createElement(y,a({ref:e},p))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,a=new Array(o);a[0]=l;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:r,a[1]=s;for(var d=2;d<o;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}l.displayName="MDXCreateElement"},5293:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return l}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],s={sidebar_position:12},c="Handling Authorization Responses on Android",d={unversionedId:"android/integration-guide/android-handling-authorization-responses",id:"android/integration-guide/android-handling-authorization-responses",isDocsHomePage:!1,title:"Handling Authorization Responses on Android",description:"PendingIntent is a description of an Intent and target action to perform with it. Objects returned by PendingIntent can be directed toward other applications in order to perform a specified action such as integrating the ZenKey SDK for either successful or unsuccessful authorization responses.",source:"@site/docs/android/integration-guide/android-handling-authorization-responses.md",sourceDirName:"android/integration-guide",slug:"/android/integration-guide/android-handling-authorization-responses",permalink:"/documenter/docs/android/integration-guide/android-handling-authorization-responses",editUrl:"https://github.com/MyZenKey/documenter/edit/main/docs/android/integration-guide/android-handling-authorization-responses.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Receiving Authorization Request Response on Android",permalink:"/documenter/docs/android/integration-guide/android-receive-an-authorization-request-response"},next:{title:"Creating Custom Redirect URI for Android",permalink:"/documenter/docs/android/integration-guide/android-creating-a-custom-redirect-uri"}},p=[],u={toc:p};function l(n){var e=n.components,t=(0,r.Z)(n,a);return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"handling-authorization-responses-on-android"},"Handling Authorization Responses on Android"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PendingIntent")," is a description of an Intent and target action to perform with it. Objects returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"PendingIntent")," can be directed toward other applications in order to perform a specified action such as integrating the ZenKey SDK for either successful or unsuccessful authorization responses."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234; \n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withSuccessIntent(PendingIntent.getActivity(this, Activity.RESULT_OK, new Intent(this, SuccessActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .withFailureIntent(PendingIntent.getActivity(this, Activity.RESULT_OK, new Intent(this, FailureActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,o.kt)("p",null,"Specifiying ",(0,o.kt)("inlineCode",{parentName:"p"},"PendingIntent")," to start in case of completion is an alternative. This ",(0,o.kt)("inlineCode",{parentName:"p"},"PendingIntent")," is ignored if the above ",(0,o.kt)("inlineCode",{parentName:"p"},"PendingIntents")," are specified as well."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234;\n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withCompletionIntent(PendingIntent.getActivity(this, Activity.RESULT_OK, new Intent(this, CompletionActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,o.kt)("p",null,"Specifying a ",(0,o.kt)("inlineCode",{parentName:"p"},"PendingIntent")," to start for cancelled authorizations is another option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class MyActivity extends AppCompatActivity {\n\n    private static final int REQUEST_CODE_ZENKEY = 1234;\n\n    private void startZenKeyAuthorization(){\n        startActivityForResult(\n                ZenKey.identityProvider()\n                    .authorizeIntent()\n                    .withCancellationIntent(PendingIntent.getActivity(this, Activity.RESULT_CANCELED, new Intent(this, CancellationActivity.class), PendingIntent.FLAG_UPDATE_CURRENT))\n                    .build(),\n                REQUEST_CODE_ZENKEY);\n    }\n}        \n")),(0,o.kt)("p",null,"Inside the started Activity, developers obtain the ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthorizationResponse")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthorizationResponse.fromIntent(intent)")," passing the intent which started the activity as a parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class MyResultActivity extends AppCompatActivity {\n\n    @Override\n        protected void onCreate(Bundle savedInstanceState) {\n           super.onCreate(savedInstanceState);\n           AuthorizationResponse response = AuthorizationResponse.fromIntent(getIntent());\n        }\n}        \n")))}l.isMDXComponent=!0}}]);