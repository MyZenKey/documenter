"use strict";(self.webpackChunkdevpub=self.webpackChunkdevpub||[]).push([[5951],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=s(n),f=i,g=c["".concat(u,".").concat(f)]||c[f]||p[f]||o;return n?r.createElement(g,a(a({ref:t},l),{},{components:n})):r.createElement(g,a({ref:t},l))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=c;var d={};for(var u in t)hasOwnProperty.call(t,u)&&(d[u]=t[u]);d.originalType=e,d.mdxType="string"==typeof e?e:i,a[1]=d;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5443:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],d={sidebar_position:8},u="Displaying Webview for User Login on Android",s={unversionedId:"android/integration-guide/android-display-a-webview-for-user-login",id:"android/integration-guide/android-display-a-webview-for-user-login",isDocsHomePage:!1,title:"Displaying Webview for User Login on Android",description:"With ZenKey, your app can use a WebView to trigger the native SDK letting users sign in via AuthorizeIntentBuilder. It's unnecessary to override the ZenKey button to call the Android SDK via a WebView. Rather, you override the WebViewClient.shouldInterceptRequest method and use AuthorizeIntentBuilder to generate an Intent to call Context.startActivityForResult with the generated Intent.",source:"@site/docs/android/integration-guide/android-display-a-webview-for-user-login.md",sourceDirName:"android/integration-guide",slug:"/android/integration-guide/android-display-a-webview-for-user-login",permalink:"/documenter/docs/android/integration-guide/android-display-a-webview-for-user-login",editUrl:"https://github.com/MyZenKey/documenter/edit/main/docs/android/integration-guide/android-display-a-webview-for-user-login.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Custom Request Code on Android",permalink:"/documenter/docs/android/integration-guide/android-set-custom-request-code"},next:{title:"Receiving Authorization Request Response on Android",permalink:"/documenter/docs/android/integration-guide/android-receive-an-authorization-request-response"}},l=[],p={toc:l};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"displaying-webview-for-user-login-on-android"},"Displaying Webview for User Login on Android"),(0,o.kt)("p",null,"With ZenKey, your app can use a ",(0,o.kt)("inlineCode",{parentName:"p"},"WebView")," to trigger the native SDK letting users sign in via ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthorizeIntentBuilder"),". It's unnecessary to override the ZenKey button to call the Android SDK via a ",(0,o.kt)("inlineCode",{parentName:"p"},"WebView"),". Rather, you override the ",(0,o.kt)("inlineCode",{parentName:"p"},"WebViewClient.shouldInterceptRequest")," method and use ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthorizeIntentBuilder")," to generate an ",(0,o.kt)("inlineCode",{parentName:"p"},"Intent")," to call ",(0,o.kt)("inlineCode",{parentName:"p"},"Context.startActivityForResult")," with the generated ",(0,o.kt)("inlineCode",{parentName:"p"},"Intent"),"."),(0,o.kt)("p",null,"For more on ",(0,o.kt)("inlineCode",{parentName:"p"},"shouldInterceptRequest"),", please refer to the Android documentation on ",(0,o.kt)("inlineCode",{parentName:"p"},"WebViewClient")," ",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView,%20android.webkit.WebResourceRequest)"},"here"),". "),(0,o.kt)("p",null,"To learn about ",(0,o.kt)("inlineCode",{parentName:"p"},"startActivityForResult"),", visit the ",(0,o.kt)("inlineCode",{parentName:"p"},"Context")," class page ","[here]","(",(0,o.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/android/content"},"https://developer.android.com/reference/android/content")," /Context#startActivity(android.content.Intent))."))}c.isMDXComponent=!0}}]);